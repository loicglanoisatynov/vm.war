- name: Serveur VPN
  hosts: all
  become: true

  vars:
    client_name: client1  # <-- à modifier si besoin
    destination_key: /tmp  # <-- répertoire où stocker le .ovpn côté machine locale

  tasks:
    - name: Update apt packages
      apt:
        upgrade: yes
        update_cache: yes

    - name: Install openvpn and easy-rsa
      package:
        name:
          - openvpn
          - easy-rsa
        state: present

    - name: Remove CA directory
      file:
        state: absent
        path: "{{ ansible_env.HOME }}/openvpn-ca/"

    - name: Create CA directory
      command: make-cadir {{ ansible_env.HOME }}/openvpn-ca

    - name: Customize CA variable configuration
      lineinfile:
        path: "{{ ansible_env.HOME }}/openvpn-ca/vars"
        regexp: "^{{ item.property | regex_escape() }}="
        line: "{{ item.property }}={{ item.value }}"
      loop:
        - { property: 'export KEY_NAME', value: '"server"' }
        - { property: 'export KEY_COUNTRY', value: '"US"' }
        - { property: 'export KEY_PROVINCE', value: '"CA"' }
        - { property: 'export KEY_CITY', value: '"SF"' }
        - { property: 'export KEY_ORG', value: '"MT"' }
        - { property: 'export KEY_EMAIL', value: '"mt@mt.com"' }
        - { property: 'export KEY_OU', value: '"MT"' }
        - { property: 'export KEY_CONFIG', value: '{{ ansible_env.HOME }}/openvpn-ca/openssl-1.0.0.cnf' }
        - { property: 'export KEY_DIR', value: '{{ ansible_env.HOME }}/openvpn-ca/keys' }

    - name: Build the certificate authority
      shell: ./build-ca
      args:
        chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
        executable: /bin/bash

    - name: Build server certificate
      shell: |
        source vars
        ./build-key-server --batch server
      args:
        chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
        executable: /bin/bash

    - name: Build Diffie-Hellman parameters and key generation
      shell: |
        source vars
        yes "" | ./build-dh
        openvpn --genkey --secret keys/ta.key
      args:
        chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
        executable: /bin/bash

    - name: Copy key and certificates to /etc/openvpn
      copy:
        remote_src: yes
        src: "{{ ansible_env.HOME }}/openvpn-ca/keys/{{ item }}"
        dest: "/etc/openvpn/"
      loop:
        - ca.crt
        - server.crt
        - server.key
        - ta.key
        - dh2048.pem

    - name: Generate server.conf from sample config
      shell: |
        gzip -d -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz > /etc/openvpn/server.conf

    - name: Adjust OpenVPN server configuration
      lineinfile:
        path: "/etc/openvpn/server.conf"
        regexp: "^{{ item.regex | regex_escape() }}"
        line: "{{ item.value }}"
      loop:
        - { regex: ';user nobody', value: 'user nobody' }
        - { regex: ';group nogroup', value: 'group nogroup' }
        - { regex: ';push "redirect-gateway def1 bypass-dhcp"', value: 'push "redirect-gateway def1 bypass-dhcp"' }
        - { regex: 'cert server.crt', value: 'cert server.crt' }
        - { regex: 'key server.key', value: 'key server.key' }

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present

    - name: Add UFW NAT rules
      blockinfile:
        path: /etc/ufw/before.rules
        insertbefore: BOF
        content: |
          *nat
          :POSTROUTING ACCEPT [0:0]
          -A POSTROUTING -s 10.8.0.0/8 -o eth0 -j MASQUERADE
          COMMIT

    - name: Change UFW default forward policy
      lineinfile:
        path: "/etc/default/ufw"
        regexp: "^DEFAULT_FORWARD_POLICY=\"DROP\""
        line: "DEFAULT_FORWARD_POLICY=\"ACCEPT\""

    - name: Allow OpenVPN and SSH ports
      shell: |
        ufw allow openvpn
        ufw allow OpenSSH

    - name: Enable UFW
      shell: ufw --force enable

    - name: Start OpenVPN service
      systemd:
        name: openvpn@server
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Generate client certificate key
      shell: |
        source vars
        ./build-key --batch {{ client_name }}
      args:
        chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
        executable: /bin/bash

    - name: Create client config directory
      file:
        path: "{{ ansible_env.HOME }}/openvpn-ca/{{ client_name }}"
        state: directory
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: 0700

    - name: Copy sample client config
      copy:
        remote_src: yes
        src: /usr/share/doc/openvpn/examples/sample-config-files/client.conf
        dest: "{{ ansible_env.HOME }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn"

    - name: Adjust client config
      lineinfile:
        path: "{{ ansible_env.HOME }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn"
        regexp: "^{{ item.regex | regex_escape() }}"
        line: "{{ item.value }}"
      loop:
        - { regex: 'remote my-server-1 1194', value: 'remote {{ inventory_hostname }} 1194' }
        - { regex: ';user nobody', value: 'user nobody' }
        - { regex: ';group nogroup', value: 'group nogroup' }
        - { regex: 'ca ca.crt', value: '#ca ca.crt' }
        - { regex: 'cert client.crt', value: '#cert client.crt' }
        - { regex: 'key client.key', value: '#key client.key' }
        - { regex: 'tls-auth ta.key 1', value: '#tls-auth ta.key 1' }

    - name: Append keys to client config file
      shell: |
        {
          echo '<ca>';
          cat keys/ca.crt;
          echo '</ca>';
          echo '<cert>';
          cat keys/{{ client_name }}.crt;
          echo '</cert>';
          echo '<key>';
          cat keys/{{ client_name }}.key;
          echo '</key>';
          echo '<tls-auth>';
          cat keys/ta.key;
          echo '</tls-auth>';
          echo 'key-direction 1';
        } >> {{ ansible_env.HOME }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn
      args:
        chdir: "{{ ansible_env.HOME }}/openvpn-ca/"
        executable: /bin/bash

    - name: Fetch client configuration to control machine
      fetch:
        src: "{{ ansible_env.HOME }}/openvpn-ca/{{ client_name }}/{{ client_name }}.ovpn"
        dest: "{{ destination_key }}/"
        flat: yes
